@extends('layouts.app')

@section('title', __('Sales Targets'))

@section('content')
<div class="d-flex justify-content-between align-items-start mb-4">
    <div>
        <h1 class="h2 mb-1">{{ __('Sales Targets') }}</h1>
        <p class="text-muted mb-0">{{ __('Set sales targets for your team members') }}</p>
    </div>
    <div class="d-flex gap-2" style="margin-top: 0.5rem;">
        @if(auth()->user()->isAdmin())
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#uploadModal">
                <i class="bi bi-upload me-2"></i>{{ __('Upload Targets') }}
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
            </button>
        @endif
        <button type="button" class="btn btn-success" onclick="saveAllTargets()" id="saveAllBtn" >
            <i class="bi bi-check-circle me-2"></i>{{ __('Save All Targets') }}
        </button>
        <button type="button" class="btn btn-outline-secondary" onclick="exportTargets()">
            <i class="bi bi-file-earmark-spreadsheet me-2"></i>{{ __('Export CSV') }}
    </button>
    </div>
</div>

<!-- Filters & Period Selection -->
<div class="card mb-3">
    <div class="card-body py-2">
        <!-- Period Selection Row -->
        <div class="row g-2 align-items-end mb-2">
            <div class="col-md-2">
                <label for="target_year" class="form-label small mb-1">
                    <i class="bi bi-calendar-event me-1"></i>{{ __('Year') }} <span class="text-danger">*</span>
                </label>
                <select class="form-select form-select-sm" id="target_year" name="year" required>
                    <option value="">{{ __('Select Year') }}</option>
                    @for($y = date('Y'); $y <= date('Y') + 2; $y++)
                        <option value="{{ $y }}" {{ $y == date('Y') ? 'selected' : '' }}>{{ $y }}</option>
                    @endfor
                </select>
            </div>
            <div class="col-md-2">
                <label for="target_month" class="form-label small mb-1">
                    <i class="bi bi-calendar-month me-1"></i>{{ __('Month') }} <span class="text-danger">*</span>
                </label>
                <select class="form-select form-select-sm" id="target_month" name="month" required>
                    <option value="">{{ __('Select Month') }}</option>
                    @for($m = 1; $m <= 12; $m++)
                        <option value="{{ $m }}" {{ $m == date('n') ? 'selected' : '' }}>
                            {{ date('F', mktime(0, 0, 0, $m, 1)) }}
                        </option>
                    @endfor
                </select>
            </div>
            <div class="col-md-2">
                <div id="period-status"></div>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-sm btn-primary w-100" onclick="loadTargetMatrix()">
                    <i class="bi bi-table me-1"></i>{{ __('Load Matrix') }}
                </button>
            </div>
            <div class="col-md-4 text-end">
                <small class="text-muted">
                    <i class="bi bi-funnel me-1"></i>{{ __('Filters') }}:
                </small>
            </div>
        </div>
        
        <!-- Filters Row -->
        <div class="row g-2">
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_classification" {{ auth()->user()->isManager() && auth()->user()->classification && auth()->user()->classification !== 'both' ? 'disabled' : '' }}>
                    @if(auth()->user()->isAdmin())
                        <option value="">{{ __('All Classifications') }}</option>
                        <option value="food">{{ __('Food') }}</option>
                        <option value="non_food">{{ __('Non-Food') }}</option>
                        <option value="both">{{ __('Both') }}</option>
                    @else
                        @if(auth()->user()->classification)
                            @if(auth()->user()->classification === 'both')
                                <option value="">{{ __('All Classifications') }}</option>
                                <option value="food">{{ __('Food') }}</option>
                                <option value="non_food">{{ __('Non-Food') }}</option>
                                <option value="both" selected>{{ __('Both') }}</option>
                            @else
                                <option value="{{ auth()->user()->classification }}" selected>
                                    {{ auth()->user()->classification === 'food' ? __('Food') : __('Non-Food') }}
                                </option>
                            @endif
                        @else
                            <option value="">{{ __('All Classifications') }}</option>
                            <option value="food">{{ __('Food') }}</option>
                            <option value="non_food">{{ __('Non-Food') }}</option>
                            <option value="both">{{ __('Both') }}</option>
                        @endif
                    @endif
                </select>
            </div>
            @if(auth()->user()->isAdmin())
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_region">
                    <option value="">{{ __('All Regions') }}</option>
                </select>
            </div>
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_channel">
                    <option value="">{{ __('All Channels') }}</option>
                </select>
            </div>
            @else
            <!-- Manager sees their assigned region/channel only -->
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_region" >
                                                @if(auth()->user()->regions->count() == 1)
                                <option value="{{ auth()->user()->regions->first()->id }}">{{ auth()->user()->regions->first()->name }}</option>
                            @else
                                @foreach(auth()->user()->regions as $region)
                                    <option value="{{ $region->id }}">{{ $region->name }}</option>
                                @endforeach
                            @endif
                </select>
            </div>
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_channel" >
                    @if(auth()->user()->channels->count() == 1)
                        <option value="{{ auth()->user()->channels->first()->id }}">{{ auth()->user()->channels->first()->name }}</option>
                    @else
                        @foreach(auth()->user()->channels as $channel)
                            <option value="{{ $channel->id }}">{{ $channel->name }}</option>
                        @endforeach
                    @endif
                </select>
            </div>
            @endif
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_supplier">
                    <option value="">{{ __('All Suppliers') }}</option>
                </select>
            </div>
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_category">
                    <option value="">{{ __('All Categories') }}</option>
                </select>
            </div>
            <div class="col-md-2">
                <select class="form-select form-select-sm" id="filter_salesman">
                    <option value="">{{ __('All Salesmen') }}</option>
                </select>
            </div>
        </div>
        
        <!-- Action Buttons Row -->
        <div class="row g-2 mt-1">
            <div class="col-md-8"></div>
            <div class="col-md-2">
                <button type="button" class="btn btn-sm btn-primary w-100" onclick="applyFilters()">
                    <i class="bi bi-search me-1"></i>{{ __('Apply') }}
                </button>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-sm btn-outline-secondary w-100" onclick="resetFilters()">
                    <i class="bi bi-x-circle me-1"></i>{{ __('Clear') }}
                </button>
            </div>
        </div>
    </div>
</div>
                    
<!-- Target Matrix Table -->
<div class="card" id="target-matrix-card" style="display: none;">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h5 class="mb-0">
                <i class="bi bi-table me-2"></i>{{ __('Target Entry Matrix') }}
            </h5>
            <small class="text-muted" id="matrix-period-info"></small>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-sm btn-outline-primary" onclick="fillAllAmounts()">
                <i class="bi bi-calculator me-1"></i>{{ __('Fill All') }}
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearAllAmounts()">
                <i class="bi bi-x-circle me-1"></i>{{ __('Clear All') }}
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="resetMatrix()">
                <i class="bi bi-arrow-clockwise me-1"></i>{{ __('Reset') }}
            </button>
            <button type="button" class="btn btn-sm btn-success" onclick="saveAllTargets()" id="saveMatrixBtn" >
                <i class="bi bi-check-circle me-1"></i>{{ __('Save All Targets') }}
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-sm table-striped mb-0" id="target-matrix-table" style="min-width: 1200px;">
                <thead class="table-dark">
                    <tr >
                        <th class="text-center" style="width: 50px; white-space: nowrap;">
                            <i class="bi bi-hash me-1"></i>#
                        </th>
                        <th class="text-center" style="width: 90px; white-space: nowrap;">
                            <i class="bi bi-person-badge me-1"></i>{{ __('Emp Code') }}
                        </th>
                        <th style="width: 180px; white-space: nowrap;">
                            <i class="bi bi-person me-1"></i>{{ __('Salesman Name') }}
                        </th>
                        <th class="text-center" style="width: 100px; white-space: nowrap;">
                            <i class="bi bi-tags me-1"></i>{{ __('Class') }}
                        </th>
                        <th class="text-center" style="width: 100px; white-space: nowrap;">
                            <i class="bi bi-geo-alt me-1"></i>{{ __('Region') }}
                        </th>
                        <th class="text-center" style="width: 100px; white-space: nowrap;">
                            <i class="bi bi-diagram-3 me-1"></i>{{ __('Channel') }}
                        </th>
                        <th class="text-center" style="width: 120px; white-space: nowrap;">
                            <i class="bi bi-building me-1"></i>{{ __('Supplier') }}
                        </th>
                        <th class="text-center" style="width: 120px; white-space: nowrap;">
                            <i class="bi bi-box me-1"></i>{{ __('Category') }}
                        </th>
                        <th class="text-center" style="width: 130px; white-space: nowrap;">
                            <i class="bi bi-currency-dollar me-1"></i>{{ __('Target Amount') }}
                        </th>
                    </tr>
                </thead>
                <tbody id="target-matrix-tbody">
                    <!-- Target matrix rows will be loaded here -->
                </tbody>
            </table>
                        </div>
                    </div>
    <div class="card-footer bg-light">
        <div class="text-center">
            <small class="text-muted">
                <i class="bi bi-info-circle me-1"></i>
                <span id="total-rows">0</span> {{ __('salesmen') }} • 
                <span id="filled-rows">0</span> {{ __('with targets') }} • 
                <strong>{{ __('Total:') }} $<span id="total-amount">0.00</span></strong>
            </small>
        </div>
    </div>
                    </div>
                    
<!-- Instructions Card -->
<div class="card" id="instructions-card">
    <div class="card-body text-center py-5">
        <div class="text-muted">
            <i class="bi bi-table" style="font-size: 3rem;"></i>
            <h5 class="mt-3">{{ __('Select Period to Load Target Matrix') }}</h5>
            <p class="mb-3">{{ __('Choose a year and month above to load the target entry matrix for your salesmen.') }}</p>
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="alert alert-info">
                        <h6><i class="bi bi-lightbulb me-2"></i>{{ __('How it works:') }}</h6>
                        <ul class="list-unstyled mb-0 text-start">
                            <li><i class="bi bi-check-circle text-success me-2"></i>{{ __('Select year and month for target period') }}</li>
                            <li><i class="bi bi-check-circle text-success me-2"></i>{{ __('Load matrix showing all salesmen combinations') }}</li>
                            <li><i class="bi bi-check-circle text-success me-2"></i>{{ __('Fill target amounts for each salesman') }}</li>
                            <li><i class="bi bi-check-circle text-success me-2"></i>{{ __('Save all targets at once') }}</li>
                            <li><i class="bi bi-exclamation-triangle text-warning me-2"></i>{{ __('Targets can only be edited when period is open') }}</li>
                        </ul>
                    </div>
            </div>
            </div>
        </div>
    </div>
</div>



@push('scripts')
<script>
console.log("Loading Target Management JavaScript...");

// Global variables
let masterData = {
    regions: [],
    channels: [],
    suppliers: [],
    categories: [],
    salesmen: []
};

// Simple fetch configuration
const apiOptions = {
    method: "GET",
    headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
};

// Load master data function
async function loadMasterData() {
    console.log("Starting loadMasterData...");
    
    try {
        // Load regions
        console.log("Fetching regions...");
        const regionsResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=regions", apiOptions);
        if (regionsResponse.ok) {
            masterData.regions = await regionsResponse.json();
            console.log("Regions loaded:", masterData.regions);
            populateSelect("filter_region", masterData.regions);
        }

        // Load channels
        console.log("Fetching channels...");
        const channelsResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=channels", apiOptions);
        if (channelsResponse.ok) {
            masterData.channels = await channelsResponse.json();
            console.log("Channels loaded:", masterData.channels);
            populateSelect("filter_channel", masterData.channels);
        }

        // Load suppliers
        console.log("Fetching suppliers...");
        const suppliersResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=suppliers", apiOptions);
        if (suppliersResponse.ok) {
            masterData.suppliers = await suppliersResponse.json();
            console.log("Suppliers loaded:", masterData.suppliers);
            populateSelect("filter_supplier", masterData.suppliers);
        }

        // Load categories
        console.log("Fetching categories...");
        const categoriesResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=categories", apiOptions);
        if (categoriesResponse.ok) {
            masterData.categories = await categoriesResponse.json();
            console.log("Categories loaded:", masterData.categories);
            populateSelect("filter_category", masterData.categories);
        }

        // Load salesmen
        console.log("Fetching salesmen...");
        const salesmenResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=salesmen", apiOptions);
        if (salesmenResponse.ok) {
            masterData.salesmen = await salesmenResponse.json();
            console.log("Salesmen loaded:", masterData.salesmen);
            populateSelect("filter_salesman", masterData.salesmen);
        }

        console.log("All master data loaded successfully!");
        
    } catch (error) {
        console.error("Error in loadMasterData:", error);
        alert("Error loading filter data: " + error.message);
    }
}

// Populate select dropdown
function populateSelect(selectId, data) {
    const select = document.getElementById(selectId);
    if (!select) {
        console.log("Select element not found:", selectId);
        return;
    }
    
    // Keep the first option (usually "All ...")
    while (select.children.length > 1) {
        select.removeChild(select.lastChild);
    }
    
    // Add data options
    if (Array.isArray(data)) {
        data.forEach(item => {
            const option = document.createElement("option");
            option.value = item.id;
            option.textContent = item.name;
            select.appendChild(option);
        });
        console.log(`Populated ${selectId} with ${data.length} items`);
    }
}

// Load target matrix function
async function loadTargetMatrix() {
    console.log("Loading target matrix...");
    
    try {
        // Get form values
        const year = document.getElementById("target_year")?.value;
        const month = document.getElementById("target_month")?.value;
        
        if (!year || !month) {
            alert("Please select both year and month.");
            return;
        }
        
        // Build query parameters
        const params = new URLSearchParams({
            year: year,
            month: month,
            classification: document.getElementById("filter_classification")?.value || "",
            region_id: document.getElementById("filter_region")?.value || "",
            channel_id: document.getElementById("filter_channel")?.value || "",
            supplier_id: document.getElementById("filter_supplier")?.value || "",
            category_id: document.getElementById("filter_category")?.value || "",
            salesman_id: document.getElementById("filter_salesman")?.value || ""
        });
        
        console.log("Matrix params:", params.toString());
        
        // Make API call
        const response = await fetch(`/target-system/public/api-handler.php?action=matrix&${params}`, apiOptions);
        console.log("Matrix response status:", response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log("Matrix result:", result);
            
            if (result.success && result.data) {
                displayMatrixData(result.data);
                hideInstructions();
            } else {
                alert("Failed to load matrix: " + (result.error || "Unknown error"));
            }
        } else {
            const errorText = await response.text();
            console.error("Matrix API error:", errorText);
            alert("Matrix API error: " + response.status);
        }
        
    } catch (error) {
        console.error("Error in loadTargetMatrix:", error);
        alert("Error loading target matrix: " + error.message);
    }
}

// Display matrix data in table
function displayMatrixData(data) {
    console.log("Displaying matrix data:", data.length, "rows");
    
    const tbody = document.getElementById("target-matrix-tbody");
    if (!tbody) {
        console.error("Matrix tbody not found");
        return;
    }
    
    if (!data || data.length === 0) {
        tbody.innerHTML = `
            <tr >
                <td colspan="9" class="text-center py-4">
                    <p>No data found for selected criteria.</p>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = "";
    
    data.forEach((row, index) => {
        const tr = document.createElement("tr");
        tr.setAttribute("data-salesman-id", row.salesman_id);
        tr.setAttribute("data-supplier-id", row.supplier_id);
        tr.setAttribute("data-category-id", row.category_id);
        tr.setAttribute("data-region-id", row.region_id);
        tr.setAttribute("data-channel-id", row.channel_id);
        tr.innerHTML = `
            <td>${index + 1}</td>
            <td>${row.salesman_code || ""}</td>
            <td>${row.salesman_name || ""}</td>
            <td><span class="badge bg-secondary">${row.salesman_classification || ""}</span></td>
            <td>${row.region || ""}</td>
            <td>${row.channel || ""}</td>
            <td>${row.supplier || ""}</td>
            <td>${row.category || ""}</td>
            <td>
                <input type="number" class="form-control form-control-sm" 
                       value="${row.target_amount || 0}" min="0" step="0.01">
            </td>
        `;
        tbody.appendChild(tr);

    // Enable save buttons after loading data
    const saveAllBtn = document.getElementById("saveAllBtn");
    const saveMatrixBtn = document.getElementById("saveMatrixBtn");
    if (saveAllBtn) saveAllBtn.disabled = false;
    if (saveMatrixBtn) saveMatrixBtn.disabled = false;
    });
}

// Hide instructions and show matrix
function hideInstructions() {
    const instructions = document.getElementById("instructions-card");
    const matrix = document.getElementById("target-matrix-card");
    
    if (instructions) instructions.style.display = "none";
    if (matrix) matrix.style.display = "block";
}

// Initialize when page loads
document.addEventListener("DOMContentLoaded", function() {
    console.log("DOM loaded, initializing...");
    
    // Load master data immediately
    loadMasterData();
    
    // Make loadTargetMatrix available globally
    window.loadTargetMatrix = loadTargetMatrix;

// Upload targets function
function uploadTargets() {
    document.getElementById("uploadFileInput")?.click();
}

// Download template function
function downloadTemplate() {
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    window.open(`/target-system/public/download-template.php?year=${year}&month=${month}`, "_blank");
}

// Handle file upload
function handleFileUpload(fileInput) {
    const file = fileInput.files[0];
    if (!file) return;
    
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    const formData = new FormData();
    formData.append("file", file);
    formData.append("year", year);
    formData.append("month", month);
    
    // Show loading
    const uploadBtn = document.querySelector("button[onclick*=uploadTargets]");
    if (uploadBtn) {
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = "Uploading...";
    }
    
    fetch("/target-system/public/upload-targets.php", {
        method: "POST",
        body: formData
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert(`Upload completed!\nCreated: ${result.created}\nUpdated: ${result.updated}\nErrors: ${result.errors.length}`);
            if (result.errors.length > 0) {
                console.log("Upload errors:", result.errors);
            }
            // Reload matrix if currently displayed
            if (document.getElementById("target-matrix-card")?.style.display !== "none") {
                loadTargetMatrix();
            }
        } else {
            alert("Upload failed: " + result.error);
        }
    })
    .catch(error => {
        console.error("Upload error:", error);
        alert("Upload failed: " + error.message);
    })
    .finally(() => {
        if (uploadBtn) {
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = `<i class="bi bi-upload me-2"></i>Upload Targets`;
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
        }
        fileInput.value = ""; // Clear file input
    });
}

window.uploadTargets = uploadTargets;
window.downloadTemplate = downloadTemplate;
window.handleFileUpload = handleFileUpload;
    
    console.log("Target Management System initialized!");

// Save all targets function
async function saveAllTargets() {
    try {
        console.log("Saving all targets...");
        
        // Get current period
        const year = document.getElementById("target_year")?.value;
        const month = document.getElementById("target_month")?.value;
        
        if (!year || !month) {
            alert("Please select year and month first.");
            return;
        }
        
        // Collect all target amounts from the matrix
        const targets = [];
        const rows = document.querySelectorAll("#target-matrix-tbody tr");
        
        rows.forEach(row => {
            const input = row.querySelector("input[type=number]");
            if (input) {
                const amount = parseFloat(input.value) || 0;
                const salesmanId = row.getAttribute("data-salesman-id");
                const supplierId = row.getAttribute("data-supplier-id");
                const categoryId = row.getAttribute("data-category-id");
                
                if (salesmanId && supplierId && categoryId) {
                    targets.push({
                        region_id: row.getAttribute("data-region-id"),
                        channel_id: row.getAttribute("data-channel-id"),
                        salesman_id: salesmanId,
                        supplier_id: supplierId,
                        category_id: categoryId,
                        target_amount: amount
                    });
                }
            }
        });
        
        if (targets.length === 0) {
            alert("No targets to save.");
            return;
        }
        
        // Disable save button
        const saveBtn = document.getElementById("saveMatrixBtn");
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = "Saving...";
        }
        
        // Send to API
        const response = await fetch("/target-system/public/save-targets.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify({
                year: year,
                month: month,
                targets: targets
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                alert(`Successfully saved ${result.saved_count} targets!`);
                console.log("Targets saved:", result);
            } else {
                alert("Error saving targets: " + (result.error || "Unknown error"));
            }
        } else {
            alert("HTTP Error: " + response.status);
        }
        
    } catch (error) {
        console.error("Error saving targets:", error);
        alert("Error saving targets: " + error.message);
    } finally {
        // Re-enable save button
        const saveBtn = document.getElementById("saveMatrixBtn");
        if (saveBtn) {
            saveBtn.disabled = false;
            saveBtn.innerHTML = "Save All Targets";
        }
    }
}

});

// Apply filters function
function applyFilters() {
    console.log("Applying filters...");
    loadTargetMatrix();
}

// Reset filters function
function resetFilters() {
    console.log("Resetting filters...");
    
    // Reset all filter dropdowns to first option
    const filterSelects = [
        "filter_classification",
        "filter_region", 
        "filter_channel",
        "filter_supplier",
        "filter_category",
        "filter_salesman"
    ];
    
    filterSelects.forEach(id => {
        const select = document.getElementById(id);
        if (select && select.options.length > 0) {
            select.selectedIndex = 0;
        }
    });
    
    // Clear matrix
    const tbody = document.getElementById("target-matrix-tbody");
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center py-4">
                    <p class="text-muted">Please select filters and click Apply to load data.</p>
                </td>
            </tr>
        `;
    }
    
    // Hide matrix card and show instructions
    document.getElementById("target-matrix-card")?.style.setProperty("display", "none");
    document.getElementById("instructions-card")?.style.setProperty("display", "block");
}

// Fill all amounts function
function fillAllAmounts() {
    const amount = prompt("Enter amount to fill all targets:", "1000");
    if (amount !== null && !isNaN(amount) && parseFloat(amount) >= 0) {
        const inputs = document.querySelectorAll("#target-matrix-tbody input[type=number]");
        inputs.forEach(input => {
            input.value = parseFloat(amount);
        });
        console.log(`Filled ${inputs.length} targets with amount: ${amount}`);
    }
}

// Clear all amounts function
function clearAllAmounts() {
    if (confirm("Are you sure you want to clear all target amounts?")) {
        const inputs = document.querySelectorAll("#target-matrix-tbody input[type=number]");
        inputs.forEach(input => {
            input.value = 0;
        });
        console.log(`Cleared ${inputs.length} target amounts`);
    }
}

// Reset matrix function
function resetMatrix() {
    if (confirm("Are you sure you want to reset the matrix? This will reload the original data.")) {
        loadTargetMatrix();
    }
}

console.log("Target Management JavaScript loaded successfully!");
</script></script>
@endpush

<!-- Upload Targets Modal -->
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
@if(auth()->user()->isAdmin())
<div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">
                    <i class="bi bi-upload me-2"></i>{{ __('Upload Targets') }}
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="uploadForm" enctype="multipart/form-data">
                @csrf
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="uploadFile" class="form-label">{{ __('Select CSV File') }}</label>
                        <input type="file" class="form-control" id="uploadFile" name="file" accept=".csv,.xlsx,.xls" required>
                        <div class="form-text">{{ __('Supported formats: CSV, Excel (.xlsx, .xls)') }}</div>
                    </div>
                    
                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label for="uploadYear" class="form-label">{{ __('Target Year') }} <span class="text-danger">*</span></label>
                            <select class="form-select" id="uploadYear" name="year" required>
                                <option value="">{{ __('Select Year') }}</option>
                                @for($y = date('Y'); $y <= date('Y') + 2; $y++)
                                    <option value="{{ $y }}" {{ $y == date('Y') ? 'selected' : '' }}>{{ $y }}</option>
                                @endfor
                            </select>
                        </div>

        // Add data attributes for saving
        row.setAttribute("data-salesman-id", item.salesman_id || "");
        row.setAttribute("data-supplier-id", item.supplier_id || "");
        row.setAttribute("data-category-id", item.category_id || "");
        row.setAttribute("data-region-id", item.region_id || "");
        row.setAttribute("data-channel-id", item.channel_id || "");
                        <div class="col-md-6">
                            <label for="uploadMonth" class="form-label">{{ __('Target Month') }} <span class="text-danger">*</span></label>
                            <select class="form-select" id="uploadMonth" name="month" required>
                                <option value="">{{ __('Select Month') }}</option>
                                @for($m = 1; $m <= 12; $m++)
                                    <option value="{{ $m }}" {{ $m == date('n') ? 'selected' : '' }}>
                                        {{ date('F', mktime(0, 0, 0, $m, 1)) }}
                                    </option>
                                @endfor
                            </select>
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>{{ __('File Format Requirements:') }}</h6>
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="downloadTemplate()">
                                <i class="bi bi-download me-1"></i>{{ __('Download Template') }}
                            </button>
                        </div>
                        <ul class="mb-0">
                            <li>{{ __('Use the template above or create CSV with headers: Employee Code, Amount (required)') }}</li>
                            <li>{{ __('Optional columns: Salesman Name, Region, Channel, Supplier, Category') }}</li>
                            <li>{{ __('Excel files (.xlsx, .xls) will be converted automatically') }}</li>
                            <li>{{ __('Existing targets for the same period will be updated') }}</li>
                            <li>{{ __('Invalid rows will be skipped with detailed error report') }}</li>
                        </ul>
                    </div>
                    
                    <div id="uploadProgress" style="display: none;">
                        <div class="progress mb-2">
                            <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <small class="text-muted">{{ __('Processing...') }}</small>
                    </div>
                    
                    <div id="uploadResults" style="display: none;"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>{{ __('Cancel') }}
                    </button>
                    <button type="submit" class="btn btn-primary" id="uploadBtn">
                        <i class="bi bi-upload me-1"></i>{{ __('Upload Targets') }}
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
document.getElementById('uploadForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const uploadBtn = document.getElementById('uploadBtn');
    const uploadProgress = document.getElementById('uploadProgress');
    const uploadResults = document.getElementById('uploadResults');
    
    // Validate form
    const file = document.getElementById('uploadFile').files[0];
    const year = document.getElementById('uploadYear').value;
    const month = document.getElementById('uploadMonth').value;
    
    if (!file || !year || !month) {
        showAlert('Please fill in all required fields.', 'error');
        return;
    }
    
    // Show progress
    uploadBtn.disabled = true;
    uploadBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>{{ __("Uploading...") }}';
    uploadProgress.style.display = 'block';
    uploadResults.style.display = 'none';
    
    try {
        const response = await fetch('/api/targets/upload', {
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
            },
            credentials: 'same-origin',
            body: formData
        });
        
        const result = await response.json();
        
        if (response.ok) {
            uploadResults.innerHTML = `
                <div class="alert alert-success">
                    <h6><i class="bi bi-check-circle me-2"></i>{{ __('Upload Successful!') }}</h6>
                    <ul class="mb-0">
                        <li>{{ __('Processed:') }} ${result.processed || 0} {{ __('rows') }}</li>
                        <li>{{ __('Created:') }} ${result.created || 0} {{ __('new targets') }}</li>
                        <li>{{ __('Updated:') }} ${result.updated || 0} {{ __('existing targets') }}</li>
                        ${result.errors ? `<li class="text-warning">{{ __('Errors:') }} ${result.errors} {{ __('rows skipped') }}</li>` : ''}
                    </ul>
                </div>
            `;
            
            // Refresh the target matrix if it's loaded
            if (typeof loadTargetMatrix === 'function') {
                setTimeout(() => {
                    loadTargetMatrix();
                }, 1000);
            }
            
            showAlert(`{{ __('Successfully uploaded') }} ${result.created + result.updated} {{ __('targets') }}`, 'success');
        } else {
            throw new Error(result.message || 'Upload failed');
        }
        
    } catch (error) {
        console.error('Upload error:', error);
        uploadResults.innerHTML = `
            <div class="alert alert-danger">
                <h6><i class="bi bi-exclamation-triangle me-2"></i>{{ __('Upload Failed') }}</h6>
                <p class="mb-0">${error.message}</p>
            </div>
        `;
        showAlert('{{ __("Upload failed. Please check the file format and try again.") }}', 'error');
    } finally {
        uploadBtn.disabled = false;
        uploadBtn.innerHTML = '<i class="bi bi-upload me-1"></i>{{ __("Upload Targets") }}';
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
        uploadProgress.style.display = 'none';
        uploadResults.style.display = 'block';
    }
});

// Reset form when modal is closed
document.getElementById('uploadModal').addEventListener('hidden.bs.modal', function() {
    document.getElementById('uploadForm').reset();
    document.getElementById('uploadResults').style.display = 'none';
    document.getElementById('uploadProgress').style.display = 'none';
});

// Download template function
function downloadTemplate() {
    // Show loading state
    const btn = event.target;
    const originalText = btn.innerHTML;
    btn.disabled = true;
    btn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>{{ __("Generating...") }}';
    
    try {
        // Use the backend API to download template with real data
        window.open('/api/targets/template', '_blank');
        
        // Show success message
        showAlert('{{ __("Template download started! The file contains real employee data for easy completion.") }}', 'success');
        
    } catch (error) {
        console.error('Template download error:', error);
        showAlert('{{ __("Template download failed. Please try again.") }}', 'error');
    } finally {
        // Restore button state
        setTimeout(() => {
            btn.disabled = false;
            btn.innerHTML = originalText;
        }, 1000);
    }
}

// Export targets function
// Export targets function
function exportTargets() {
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    // Get current filter values
    const params = new URLSearchParams({
        year: year,
        month: month,
        classification: document.getElementById("filter_classification")?.value || "",
        region_id: document.getElementById("filter_region")?.value || "",
        channel_id: document.getElementById("filter_channel")?.value || "",
        supplier_id: document.getElementById("filter_supplier")?.value || "",
        category_id: document.getElementById("filter_category")?.value || "",
        salesman_id: document.getElementById("filter_salesman")?.value || ""
    });
    
    console.log("Exporting with filters:", params.toString());
    
    window.open(`/target-system/public/export-targets.php?${params}`, "_blank");
}
    
    window.open(`/target-system/public/export-targets.php?year=${year}&month=${month}`, "_blank");
}

// Upload targets function
function uploadTargets() {
    alert("Upload functionality will be implemented soon.");
}

// Make functions globally available
window.exportTargets = exportTargets;
window.applyFilters = applyFilters;
window.resetFilters = resetFilters;
window.fillAllAmounts = fillAllAmounts;
window.clearAllAmounts = clearAllAmounts;
window.resetMatrix = resetMatrix;
window.uploadTargets = uploadTargets;
</script>
@endif
@push("scripts")
<script>
// Global variables
let matrixData = [];
let hasChanges = false;
let currentPeriod = { isOpen: true };

// API configuration
const apiOptions = {
    method: "GET",
    headers: {
        "Accept": "application/json"
    }
};

// Load master data for filters
async function loadMasterData() {
    try {
        console.log("Loading master data...");
        
        // Load regions
        const regionsResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=regions", apiOptions);
        if (regionsResponse.ok) {
            const regions = await regionsResponse.json();
            populateSelect("filter_region", regions, "id", "name");
            console.log("Regions loaded:", regions.length);
        }
        
        // Load channels
        const channelsResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=channels", apiOptions);
        if (channelsResponse.ok) {
            const channels = await channelsResponse.json();
            populateSelect("filter_channel", channels, "id", "name");
            console.log("Channels loaded:", channels.length);
        }
        
        // Load suppliers
        const suppliersResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=suppliers", apiOptions);
        if (suppliersResponse.ok) {
            const suppliers = await suppliersResponse.json();
            populateSelect("filter_supplier", suppliers, "id", "name");
            console.log("Suppliers loaded:", suppliers.length);
        }
        
        // Load categories
        const categoriesResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=categories", apiOptions);
        if (categoriesResponse.ok) {
            const categories = await categoriesResponse.json();
            populateSelect("filter_category", categories, "id", "name");
            console.log("Categories loaded:", categories.length);
        }
        
        // Load salesmen
        const salesmenResponse = await fetch("/target-system/public/api-handler.php?action=deps&type=salesmen", apiOptions);
        if (salesmenResponse.ok) {
            const salesmen = await salesmenResponse.json();
            populateSelect("filter_salesman", salesmen, "id", "name");
            console.log("Salesmen loaded:", salesmen.length);
        }
        
    } catch (error) {
        console.error("Error loading master data:", error);
    }
}

// Populate select dropdown
function populateSelect(selectId, data, valueField, textField) {
    const select = document.getElementById(selectId);
    if (!select) return;
    
    // Keep the first option (placeholder)
    const firstOption = select.firstElementChild;
    select.innerHTML = "";
    if (firstOption) select.appendChild(firstOption);
    
    data.forEach(item => {
        const option = document.createElement("option");
        option.value = item[valueField];
        option.textContent = item[textField];
        select.appendChild(option);
    });
}

// Load target matrix
async function loadTargetMatrix() {
    console.log("Loading target matrix...");
    
    try {
        const year = document.getElementById("target_year")?.value;
        const month = document.getElementById("target_month")?.value;
        
        if (!year || !month) {
            alert("Please select both year and month.");
            return;
        }
        
        const params = new URLSearchParams({
            year: year,
            month: month,
            classification: document.getElementById("filter_classification")?.value || "",
            region_id: document.getElementById("filter_region")?.value || "",
            channel_id: document.getElementById("filter_channel")?.value || "",
            supplier_id: document.getElementById("filter_supplier")?.value || "",
            category_id: document.getElementById("filter_category")?.value || "",
            salesman_id: document.getElementById("filter_salesman")?.value || ""
        });
        
        const response = await fetch(`/target-system/public/api-handler.php?action=matrix&${params}`, apiOptions);
        
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                matrixData = result.data || [];
                console.log("Matrix data loaded:", matrixData.length, "items");
                displayMatrixData(matrixData);
                
                // Show matrix and hide instructions
                document.getElementById("instructions-card")?.style.setProperty("display", "none");
                document.getElementById("target-matrix-card")?.style.setProperty("display", "block");
                
                // Enable save buttons
                const saveBtn = document.getElementById("saveAllBtn");
                if (saveBtn) saveBtn.disabled = false;
            } else {
                alert("Error loading matrix: " + (result.error || "Unknown error"));
            }
        } else {
            alert("HTTP Error: " + response.status);
        }
    } catch (error) {
        console.error("Error loading target matrix:", error);
        alert("Error loading target matrix: " + error.message);
    }
}

// Display matrix data
function displayMatrixData(data) {
    console.log("Displaying matrix data:", data.length, "rows");
    
    const tbody = document.getElementById("target-matrix-tbody");
    if (!tbody) {
        console.error("Matrix tbody not found");
        return;
    }
    
    if (!data || data.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center py-4">
                    <p>No data found for selected criteria.</p>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = "";
    
    data.forEach((row, index) => {
        const tr = document.createElement("tr");
        
        // Add essential data attributes for saving
        tr.setAttribute("data-salesman-id", row.salesman_id || "");
        tr.setAttribute("data-supplier-id", row.supplier_id || "");
        tr.setAttribute("data-category-id", row.category_id || "");
        tr.setAttribute("data-region-id", row.region_id || "");
        tr.setAttribute("data-channel-id", row.channel_id || "");
        
        tr.innerHTML = `
            <td class="text-center">${index + 1}</td>
            <td class="text-center"><code>${row.salesman_code || ""}</code></td>
            <td>${row.salesman_name || ""}</td>
            <td class="text-center"><span class="badge bg-secondary">${row.salesman_classification || ""}</span></td>
            <td class="text-center">${row.region || ""}</td>
            <td class="text-center">${row.channel || ""}</td>
            <td class="text-center">${row.supplier || ""}</td>
            <td class="text-center">${row.category || ""}</td>
            <td class="text-center">
                <input type="number" class="form-control form-control-sm text-end" 
                       value="${row.target_amount || 0}" min="0" step="0.01" style="width: 100px;">
            </td>
        `;
        tbody.appendChild(tr);
    });
}

// Save all targets
async function saveAllTargets() {
    console.log("Save All Targets clicked!");
    
    try {
        const year = document.getElementById("target_year")?.value;
        const month = document.getElementById("target_month")?.value;
        
        if (!year || !month) {
            alert("Please select year and month first.");
            return;
        }
        
        const targets = [];
        const rows = document.querySelectorAll("#target-matrix-tbody tr");
        
        console.log("Found rows:", rows.length);
        
        rows.forEach((row, index) => {
            const input = row.querySelector("input[type=number]");
            if (input && row.dataset.salesmanId) {
                const amount = parseFloat(input.value) || 0;
                targets.push({
                    salesman_id: parseInt(row.dataset.salesmanId),
                    supplier_id: parseInt(row.dataset.supplierId),
                    category_id: parseInt(row.dataset.categoryId),
                    region_id: parseInt(row.dataset.regionId),
                    channel_id: parseInt(row.dataset.channelId),
                    target_amount: amount
                });
            }
        });
        
        if (targets.length === 0) {
            alert("No targets to save. Please load the matrix first.");
            return;
        }
        
        console.log("Saving", targets.length, "targets");
        
        const saveButtons = document.querySelectorAll("button[onclick*=saveAllTargets]");
        saveButtons.forEach(btn => {
            btn.disabled = true;
            btn.innerHTML = "Saving...";
        });
        
        const response = await fetch("/target-system/public/save-targets.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify({
                year: year,
                month: month,
                targets: targets
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                alert(`Successfully saved ${result.saved_count} targets!`);
            } else {
                alert("Error: " + (result.error || "Unknown error"));
            }
        } else {
            alert("HTTP Error: " + response.status);
        }
        
    } catch (error) {
        console.error("Error saving targets:", error);
        alert("Error saving targets: " + error.message);
    } finally {
        const saveButtons = document.querySelectorAll("button[onclick*=saveAllTargets]");
        saveButtons.forEach(btn => {
            btn.disabled = false;
            btn.innerHTML = `<i class="bi bi-check-circle me-1"></i>Save All Targets`;
        });
    }
}

// Export targets
// Export targets function
function exportTargets() {
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    // Get current filter values
    const params = new URLSearchParams({
        year: year,
        month: month,
        classification: document.getElementById("filter_classification")?.value || "",
        region_id: document.getElementById("filter_region")?.value || "",
        channel_id: document.getElementById("filter_channel")?.value || "",
        supplier_id: document.getElementById("filter_supplier")?.value || "",
        category_id: document.getElementById("filter_category")?.value || "",
        salesman_id: document.getElementById("filter_salesman")?.value || ""
    });
    
    console.log("Exporting with filters:", params.toString());
    
    window.open(`/target-system/public/export-targets.php?${params}`, "_blank");
}
    
    window.open(`/target-system/public/export-targets.php?year=${year}&month=${month}`, "_blank");
}

// Initialize when DOM is ready
document.addEventListener("DOMContentLoaded", function() {
    console.log("Target Management System initialized!");
    loadMasterData();
});

// Make functions globally available
window.loadTargetMatrix = loadTargetMatrix;

// Upload targets function
function uploadTargets() {
    document.getElementById("uploadFileInput")?.click();
}

// Download template function
function downloadTemplate() {
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    window.open(`/target-system/public/download-template.php?year=${year}&month=${month}`, "_blank");
}

// Handle file upload
function handleFileUpload(fileInput) {
    const file = fileInput.files[0];
    if (!file) return;
    
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    const formData = new FormData();
    formData.append("file", file);
    formData.append("year", year);
    formData.append("month", month);
    
    // Show loading
    const uploadBtn = document.querySelector("button[onclick*=uploadTargets]");
    if (uploadBtn) {
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = "Uploading...";
    }
    
    fetch("/target-system/public/upload-targets.php", {
        method: "POST",
        body: formData
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert(`Upload completed!\nCreated: ${result.created}\nUpdated: ${result.updated}\nErrors: ${result.errors.length}`);
            if (result.errors.length > 0) {
                console.log("Upload errors:", result.errors);
            }
            // Reload matrix if currently displayed
            if (document.getElementById("target-matrix-card")?.style.display !== "none") {
                loadTargetMatrix();
            }
        } else {
            alert("Upload failed: " + result.error);
        }
    })
    .catch(error => {
        console.error("Upload error:", error);
        alert("Upload failed: " + error.message);
    })
    .finally(() => {
        if (uploadBtn) {
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = `<i class="bi bi-upload me-2"></i>Upload Targets`;
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
        }
        fileInput.value = ""; // Clear file input
    });
}

window.uploadTargets = uploadTargets;
window.downloadTemplate = downloadTemplate;
window.handleFileUpload = handleFileUpload;
window.saveAllTargets = saveAllTargets;
window.exportTargets = exportTargets;
window.applyFilters = applyFilters;
window.resetFilters = resetFilters;
window.fillAllAmounts = fillAllAmounts;
window.clearAllAmounts = clearAllAmounts;
window.resetMatrix = resetMatrix;

// Apply filters function
function applyFilters() {
    console.log("Applying filters...");
    loadTargetMatrix();
}

// Reset filters function
function resetFilters() {
    console.log("Resetting filters...");
    
    // Reset all filter dropdowns to first option
    const filterSelects = [
        "filter_classification",
        "filter_region", 
        "filter_channel",
        "filter_supplier",
        "filter_category",
        "filter_salesman"
    ];
    
    filterSelects.forEach(id => {
        const select = document.getElementById(id);
        if (select && select.options.length > 0) {
            select.selectedIndex = 0;
        }
    });
    
    // Clear matrix
    const tbody = document.getElementById("target-matrix-tbody");
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center py-4">
                    <p class="text-muted">Please select filters and click Apply to load data.</p>
                </td>
            </tr>
        `;
    }
    
    // Hide matrix card and show instructions
    document.getElementById("target-matrix-card")?.style.setProperty("display", "none");
    document.getElementById("instructions-card")?.style.setProperty("display", "block");
}

// Fill all amounts function
function fillAllAmounts() {
    const amount = prompt("Enter amount to fill all targets:", "1000");
    if (amount !== null && !isNaN(amount) && parseFloat(amount) >= 0) {
        const inputs = document.querySelectorAll("#target-matrix-tbody input[type=number]");
        inputs.forEach(input => {
            input.value = parseFloat(amount);
        });
        console.log(`Filled ${inputs.length} targets with amount: ${amount}`);
    }
}

// Clear all amounts function
function clearAllAmounts() {
    if (confirm("Are you sure you want to clear all target amounts?")) {
        const inputs = document.querySelectorAll("#target-matrix-tbody input[type=number]");
        inputs.forEach(input => {
            input.value = 0;
        });
        console.log(`Cleared ${inputs.length} target amounts`);
    }
}

// Reset matrix function
function resetMatrix() {
    if (confirm("Are you sure you want to reset the matrix? This will reload the original data.")) {
        loadTargetMatrix();
    }
}

console.log("Target Management JavaScript loaded successfully!");
</script>
@endpush
<script>
// Save All Targets function
async function saveAllTargets() {
    console.log("Save All Targets clicked!");
    
    try {
        // Get current period
        const year = document.getElementById("target_year")?.value;
        const month = document.getElementById("target_month")?.value;
        
        if (!year || !month) {
            alert("Please select year and month first.");
            return;
        }
        
        console.log("Collecting targets for:", year, month);
        
        // Collect all target amounts from the matrix
        const targets = [];
        const rows = document.querySelectorAll("#target-matrix-tbody tr");
        
        console.log("Found rows:", rows.length);
        
        rows.forEach((row, index) => {
            const input = row.querySelector("input[type=number]");
            if (input) {
                const amount = parseFloat(input.value) || 0;
                const salesmanId = row.getAttribute("data-salesman-id");
                const supplierId = row.getAttribute("data-supplier-id");
                const categoryId = row.getAttribute("data-category-id");
                const regionId = row.getAttribute("data-region-id");
                const channelId = row.getAttribute("data-channel-id");
                
                if (salesmanId && supplierId && categoryId && regionId && channelId) {
                    const target = {
                        salesman_id: parseInt(salesmanId),
                        supplier_id: parseInt(supplierId),
                        category_id: parseInt(categoryId),
                        region_id: parseInt(regionId),
                        channel_id: parseInt(channelId),
                        target_amount: amount
                    };
                    
                    console.log("Adding target:", target);
                    targets.push(target);
                }
            }
        });
        
        if (targets.length === 0) {
            alert("No targets to save. Please load the matrix first and enter some target amounts.");
            return;
        }
        
        console.log("Saving", targets.length, "targets");
        
        // Disable save buttons
        const saveButtons = document.querySelectorAll("button[onclick*=saveAllTargets]");
        saveButtons.forEach(btn => {
            btn.disabled = true;
            btn.innerHTML = "Saving...";
        });
        
        // Send to API
        const response = await fetch("/target-system/public/save-targets.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify({
                year: year,
                month: month,
                targets: targets
            })
        });
        
        console.log("API Response status:", response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log("API Response:", result);
            
            if (result.success) {
                alert(`Successfully saved ${result.saved_count} targets!`);
            } else {
                alert("Error saving targets: " + (result.error || "Unknown error"));
            }
        } else {
            const errorText = await response.text();
            console.error("HTTP Error:", response.status, errorText);
            alert("HTTP Error: " + response.status);
        }
        
    } catch (error) {
        console.error("Error saving targets:", error);
        alert("Error saving targets: " + error.message);
    } finally {
        // Re-enable save buttons
        const saveButtons = document.querySelectorAll("button[onclick*=saveAllTargets]");
        saveButtons.forEach(btn => {
            btn.disabled = false;
            btn.innerHTML = `<i class="bi bi-check-circle me-1"></i>Save All Targets`;
        });
    }
}

// Load Target Matrix function
async function loadTargetMatrix() {
    console.log("Loading target matrix...");
    
    try {
        const year = document.getElementById("target_year")?.value;
        const month = document.getElementById("target_month")?.value;
        
        if (!year || !month) {
            alert("Please select both year and month.");
            return;
        }
        
        const params = new URLSearchParams({
            year: year,
            month: month,
            classification: document.getElementById("filter_classification")?.value || "",
            region_id: document.getElementById("filter_region")?.value || "",
            channel_id: document.getElementById("filter_channel")?.value || "",
            supplier_id: document.getElementById("filter_supplier")?.value || "",
            category_id: document.getElementById("filter_category")?.value || "",
            salesman_id: document.getElementById("filter_salesman")?.value || ""
        });
        
        console.log("Matrix params:", params.toString());
        
        const response = await fetch(`/target-system/public/api-handler.php?action=matrix&${params}`, {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        });
        
        console.log("Matrix response status:", response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log("Matrix result:", result);
            
            if (result.success) {
                displayMatrixData(result.data || []);
                
                // Show matrix and hide instructions
                const instructionsCard = document.getElementById("instructions-card");
                const matrixCard = document.getElementById("target-matrix-card");
                
                if (instructionsCard) instructionsCard.style.display = "none";
                if (matrixCard) matrixCard.style.display = "block";
                
                // Enable save buttons
                const saveButtons = document.querySelectorAll("button[onclick*=saveAllTargets]");
                saveButtons.forEach(btn => btn.disabled = false);
            } else {
                alert("Error loading matrix: " + (result.error || "Unknown error"));
            }
        } else {
            alert("HTTP Error: " + response.status);
        }
    } catch (error) {
        console.error("Error loading target matrix:", error);
        alert("Error loading target matrix: " + error.message);
    }
}

// Display matrix data function
function displayMatrixData(data) {
    console.log("Displaying matrix data:", data.length, "rows");
    
    const tbody = document.getElementById("target-matrix-tbody");
    if (!tbody) {
        console.error("Matrix tbody not found");
        return;
    }
    
    if (!data || data.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center py-4">
                    <p>No data found for selected criteria.</p>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = "";
    
    data.forEach((row, index) => {
        const tr = document.createElement("tr");
        
        // Add essential data attributes for saving
        tr.setAttribute("data-salesman-id", row.salesman_id || "");
        tr.setAttribute("data-supplier-id", row.supplier_id || "");
        tr.setAttribute("data-category-id", row.category_id || "");
        tr.setAttribute("data-region-id", row.region_id || "");
        tr.setAttribute("data-channel-id", row.channel_id || "");
        
        tr.innerHTML = `
            <td class="text-center">${index + 1}</td>
            <td class="text-center"><code>${row.salesman_code || ""}</code></td>
            <td>${row.salesman_name || ""}</td>
            <td class="text-center"><span class="badge bg-secondary">${row.salesman_classification || ""}</span></td>
            <td class="text-center">${row.region || ""}</td>
            <td class="text-center">${row.channel || ""}</td>
            <td class="text-center">${row.supplier || ""}</td>
            <td class="text-center">${row.category || ""}</td>
            <td class="text-center">
                <input type="number" class="form-control form-control-sm text-end" 
                       value="${row.target_amount || 0}" min="0" step="0.01" style="width: 100px;">
            </td>
        `;
        tbody.appendChild(tr);
    });
}

// Make functions globally available
window.saveAllTargets = saveAllTargets;
window.loadTargetMatrix = loadTargetMatrix;

// Upload targets function
function uploadTargets() {
    document.getElementById("uploadFileInput")?.click();
}

// Download template function
function downloadTemplate() {
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    window.open(`/target-system/public/download-template.php?year=${year}&month=${month}`, "_blank");
}

// Handle file upload
function handleFileUpload(fileInput) {
    const file = fileInput.files[0];
    if (!file) return;
    
    const year = document.getElementById("target_year")?.value;
    const month = document.getElementById("target_month")?.value;
    
    if (!year || !month) {
        alert("Please select year and month first.");
        return;
    }
    
    const formData = new FormData();
    formData.append("file", file);
    formData.append("year", year);
    formData.append("month", month);
    
    // Show loading
    const uploadBtn = document.querySelector("button[onclick*=uploadTargets]");
    if (uploadBtn) {
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = "Uploading...";
    }
    
    fetch("/target-system/public/upload-targets.php", {
        method: "POST",
        body: formData
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert(`Upload completed!\nCreated: ${result.created}\nUpdated: ${result.updated}\nErrors: ${result.errors.length}`);
            if (result.errors.length > 0) {
                console.log("Upload errors:", result.errors);
            }
            // Reload matrix if currently displayed
            if (document.getElementById("target-matrix-card")?.style.display !== "none") {
                loadTargetMatrix();
            }
        } else {
            alert("Upload failed: " + result.error);
        }
    })
    .catch(error => {
        console.error("Upload error:", error);
        alert("Upload failed: " + error.message);
    })
    .finally(() => {
        if (uploadBtn) {
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = `<i class="bi bi-upload me-2"></i>Upload Targets`;
            </button>
            <!-- Hidden file input for upload -->
            <input type="file" id="uploadFileInput" accept=".csv" style="display: none;" onchange="handleFileUpload(this)">
            <button type="button" class="btn btn-primary" onclick="downloadTemplate()">
                <i class="bi bi-download me-2"></i>Download Template
        }
        fileInput.value = ""; // Clear file input
    });
}

window.uploadTargets = uploadTargets;
window.downloadTemplate = downloadTemplate;
window.handleFileUpload = handleFileUpload;

console.log("Target Management JavaScript loaded successfully!");
</script>
@endsection
